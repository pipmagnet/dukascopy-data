---
AWSTemplateFormatVersion : "2010-09-09"
Parameters:
    imageurl:
        Type: "String"

Resources:
    vpc:
        Type: "AWS::EC2::VPC"
        Properties:
            CidrBlock: "10.0.0.0/16"

    gateway:
        Type: "AWS::EC2::InternetGateway"

    gatewayattachment:
        Type: "AWS::EC2::VPCGatewayAttachment"
        Properties:
            InternetGatewayId: !Ref gateway 
            VpcId: !Ref vpc

    routetable:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref vpc

    gatewayroute:
        Type: "AWS::EC2::Route"
        Properties:
            DestinationCidrBlock: "0.0.0.0/0"
            GatewayId: !Ref gateway
            RouteTableId: !Ref routetable
        DependsOn: "gatewayattachment"

    subnet:
        Type: "AWS::EC2::Subnet"
        Properties:
            CidrBlock: "10.0.0.0/16"
            VpcId: !Ref vpc
            MapPublicIpOnLaunch: true

    routetableassociation:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref routetable
            SubnetId: !Ref subnet 

    securitygroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "only outbound"
            VpcId: !Ref vpc


    batchservicerole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Principal:
                      Service:
                        - "batch.amazonaws.com"
                    Action:
                        - "sts:AssumeRole"
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole"

    instancerole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: "Allow"
                      Principal:
                          Service:
                              - "ec2.amazonaws.com"
                      Action:
                           - "sts:AssumeRole"
            ManagedPolicyArns:
                - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"

    instanceprofile:
        Type: "AWS::IAM::InstanceProfile"
        Properties:
            Roles:
                - !Ref instancerole
                   

    batchenv:
        Type: "AWS::Batch::ComputeEnvironment"
        Properties:
            Type: "Managed"
            ServiceRole: !Ref batchservicerole
            ComputeResources:
                Type: "EC2"
                Subnets: 
                    - !Ref subnet
                MinvCpus: 0
                MaxvCpus: 1
                SecurityGroupIds:
                    - !Ref securitygroup
                InstanceRole: !Ref instanceprofile
                InstanceTypes:
                    - "m3.medium"

    jobqueue:
        Type: "AWS::Batch::JobQueue"
        Properties:
            ComputeEnvironmentOrder:
                - ComputeEnvironment: !Ref batchenv
                  Order: 1
            Priority: 1

    jobrole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Principal:
                      Service:
                        - "ecs-tasks.amazonaws.com"
                    Action:
                        - "sts:AssumeRole"
            Policies:
                -
                    PolicyName: "s3 access"
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                            - Effect: "Allow"
                              Action: "s3:*"
                              Resource: "arn:aws:s3:::ticktech-data"
    
    jobdefinition:
        Type: "AWS::Batch::JobDefinition"
        Properties:
            Type: "container"
            ContainerProperties:
                Memory: 512
                Vcpus: 1
                Image: !Ref imageurl
                JobRoleArn: !GetAtt jobrole.Arn
            RetryStrategy:
                Attempts: 1

    functionrole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Principal:
                      Service:
                        - "lambda.amazonaws.com"
                    Action:
                        - "sts:AssumeRole"
            Policies:
                - PolicyName: "jobsubmission"
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Effect: "Allow"
                            Action: "Batch:SubmitJob"
                            Resource: "*"

    function:
        Type: "AWS::Lambda::Function"
        Properties:
            Code: 
                ZipFile: |
                    var AWS = require("aws-sdk");

                    exports.handler =  function(event, context, callback) {
                        var batch = new AWS.Batch();

                        var jobparams = {
                            jobDefinition: process.env.JOB_DEFINITION,
                            jobName: "dukascopy-fetch",
                            jobQueue: process.env.JOB_QUEUE
                        };
                        batch.submitJob(jobparams, callback);
                    };

            Environment:
                Variables:
                    JOB_DEFINITION: !Ref jobdefinition
                    JOB_QUEUE: !Ref jobqueue
            Handler: "index.handler"
            Role: !GetAtt functionrole.Arn
            Runtime: "nodejs6.10"


    schedule:
        Type: "AWS::Events::Rule"
        Properties:
            ScheduleExpression: "rate(7 days)"
            Targets:
                - Arn: !GetAtt function.Arn
                  Id: "submitjobfunction"

    functionpermission:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: !Ref function
            Principal: "events.amazonaws.com"
            SourceArn: !GetAtt schedule.Arn
...
